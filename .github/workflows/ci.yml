name: CI
on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
env:
  BINDING_NAME: highs_addon
  NAPI_VERSION: 8
jobs:
  test:
    name: Test
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new-version: ${{ steps.bump-version.outputs.new_version }}
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          cache: pnpm
      - name: Install
        run: pnpm i --ignore-scripts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GPR_RO_TOKEN }}
      - name: Lint
        run: pnpm run lint
      - name: Build addon binding
        run: |
          pnpm -F highs-addon run build \
            --CDCMAKE_CXX_COMPILER_LAUNCHER=ccache
      - name: Test
        run: pnpm t
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: out/coverage
      - name: Bump version and create tag
        id: bump-version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
  prebuild-native:
    strategy:
      matrix:
        include:
          - key: linux-x64
            os: ubuntu-22.04
          # - key: darwin-x64
          #   os: macos-12
          - key: darwin-arm64
            os: macos-14
    name: Prebuild ${{ matrix.key }}
    timeout-minutes: 25
    runs-on: ${{ matrix.os }}
    needs: test
    if: needs.test.outputs.new-version != ''
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          cache: pnpm
      - name: Install
        run: pnpm i
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GPR_RO_TOKEN }}
      - name: Generate addon prebuild
        run: |
          pnpm -F highs-addon exec pkg-prebuilds-copy \
            --baseDir=build/Release \
            --source=$BINDING_NAME.node \
            --napi_version=$NAPI_VERSION \
            --name=$BINDING_NAME \
            --strip
      - name: Upload prebuild
        uses: actions/upload-artifact@v4
        with:
          name: native-${{ matrix.key }}-prebuilds
          path: packages/highs-addon/prebuilds
          retention-days: 1
  prebuild-docker:
    strategy:
      matrix:
        include:
          - key: linux-x64-musl
            image: node:18-alpine
            platform: linux/amd64
            libc: musl
          - key: linux-arm64
            image: node:18
            platform: linux/arm64
            libc: glibc
          - key: linux-arm64-musl
            image: node:18-alpine
            platform: linux/arm64
            libc: musl
    name: Prebuild ${{ matrix.key }}
    timeout-minutes: 90
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.outputs.new-version != ''
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          cache: pnpm
      - name: Install
        run: pnpm i --ignore-scripts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GPR_RO_TOKEN }}
      - name: Generate addon prebuild via Docker
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ matrix.image }}
          options: >-
            --platform=${{ matrix.platform }}
            -v ${{ github.workspace }}:/workspace
            -e NAPI_VERSION
            -e BINDING_NAME
          run: |
            if command -v apk; then
              apk update
              apk add clang clang-dev cmake gcc git g++ libc-dev libstdc++ linux-headers make
            elif command -v apt-get; then
              apt-get update
              apt-get -y install cmake
            fi
            cd workspace/packages/highs-addon
            npm run build
            npm exec pkg-prebuilds-copy -- \
              --baseDir=build/Release \
              --source=$BINDING_NAME.node \
              --napi_version=$NAPI_VERSION \
              --name=$BINDING_NAME \
              --libc=${{ matrix.libc }} \
              --strip
      - name: Upload prebuild
        uses: actions/upload-artifact@v4
        with:
          name: docker-${{ matrix.key }}-prebuilds
          path: packages/highs-addon/prebuilds
          retention-days: 1
  publish:
    name: Publish packages
    timeout-minutes: 5
    needs:
      - test
      - prebuild-native
      - prebuild-docker
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          cache: pnpm
      - name: Install
        run: pnpm i --ignore-scripts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GPR_RO_TOKEN }}
      - name: Create prebuild directories
        run: mkdir -p out/prebuilds packages/highs-addon/prebuilds
      - name: Download prebuilds
        uses: actions/download-artifact@v4
        with:
          path: out/prebuilds
      - name: Flatten prebuilds
        run: |
          mv out/prebuilds/*/* packages/highs-addon/prebuilds
          ls packages/highs-addon/prebuilds
      - name: Publish
        run: |
          pnpm -r exec pnpm version ${{ needs.test.outputs.new-version }}
          pnpm -r exec pnpm publish --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
